// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eDentalClinicWebAPI.Database;

namespace eDentalClinicWebAPI.Migrations
{
    [DbContext(typeof(eDentalClinicContext))]
    [Migration("20210301083915_NewMigration6")]
    partial class NewMigration6
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Appointment", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("CommentStatus");

                    b.Property<int>("DentistID");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool?>("RatingStatus");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("TreatmentID");

                    b.Property<int>("UserID");

                    b.HasKey("AppointmentID");

                    b.HasIndex("DentistID");

                    b.HasIndex("TreatmentID");

                    b.HasIndex("UserID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Branch", b =>
                {
                    b.Property<int>("BranchID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Title");

                    b.HasKey("BranchID");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.BranchTreatment", b =>
                {
                    b.Property<int>("BranchTreatmentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<int>("TreatmentID");

                    b.HasKey("BranchTreatmentID");

                    b.HasIndex("BranchID");

                    b.HasIndex("TreatmentID");

                    b.ToTable("BranchTreatments");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("CityID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("DentistID");

                    b.Property<string>("Text");

                    b.Property<int?>("TopicID");

                    b.Property<int>("UserID");

                    b.HasKey("CommentID");

                    b.HasIndex("DentistID");

                    b.HasIndex("TopicID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.DentalClinic", b =>
                {
                    b.Property<int>("DentalClinicID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Email");

                    b.Property<byte[]>("Logo");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.HasKey("DentalClinicID");

                    b.ToTable("DentalClinic");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Dentist", b =>
                {
                    b.Property<int>("DentistID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int>("BranchID");

                    b.Property<int>("DentalClinicID");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<byte[]>("Image");

                    b.Property<string>("LastName");

                    b.Property<string>("Phone");

                    b.HasKey("DentistID");

                    b.HasIndex("BranchID");

                    b.HasIndex("DentalClinicID");

                    b.ToTable("Dentists");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Gender", b =>
                {
                    b.Property<int>("GenderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type");

                    b.HasKey("GenderID");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("NotificationDate");

                    b.Property<string>("Text");

                    b.Property<string>("Title");

                    b.Property<int>("UserID");

                    b.HasKey("NotificationID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("TreatmentID");

                    b.Property<int>("UserID");

                    b.HasKey("PaymentID");

                    b.HasIndex("TreatmentID");

                    b.HasIndex("UserID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Rating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DentistID");

                    b.Property<int>("DentistRating");

                    b.Property<DateTime>("RatingDate")
                        .HasColumnType("date");

                    b.Property<int>("UserID");

                    b.HasKey("RatingID");

                    b.HasIndex("DentistID");

                    b.HasIndex("UserID");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Topic", b =>
                {
                    b.Property<int>("TopicID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description");

                    b.Property<string>("Subject");

                    b.Property<string>("Text");

                    b.Property<int>("UserID");

                    b.HasKey("TopicID");

                    b.HasIndex("UserID");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Treatment", b =>
                {
                    b.Property<int>("TreatmentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Image");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.Property<int>("TimeRequired");

                    b.HasKey("TreatmentID");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int>("CityID");

                    b.Property<int>("DentalClinicID");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<int>("GenderID");

                    b.Property<byte[]>("Image");

                    b.Property<string>("LastName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordSalt");

                    b.Property<string>("Phone");

                    b.Property<string>("Username");

                    b.HasKey("UserID");

                    b.HasIndex("CityID");

                    b.HasIndex("DentalClinicID");

                    b.HasIndex("GenderID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 3,
                            Address = "Lamele",
                            BirthDate = new DateTime(1997, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityID = 1,
                            DentalClinicID = 1,
                            Email = "eldar@mail.com",
                            FirstName = "Eldar",
                            GenderID = 1,
                            Image = new byte[] { 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 234, 0, 0, 0, 215, 8, 3, 0, 0, 0, 35, 174, 61, 15, 0, 0, 0, 150, 80, 76, 84, 69, 247, 247, 247, 0, 122, 255, 255, 255, 255, 0, 112, 255, 0, 114, 255, 0, 117, 255, 0, 120, 255, 0, 111, 255, 0, 118, 255, 253, 251, 247, 255, 253, 247, 255, 254, 246, 250, 249, 247, 0, 109, 255, 0, 123, 255, 255, 255, 246, 234, 242, 255, 245, 249, 255, 239, 245, 255, 205, 223, 255, 216, 230, 248, 242, 245, 247, 126, 174, 255, 212, 227, 255, 61, 141, 255, 181, 207, 255, 237, 242, 247, 196, 217, 255, 189, 212, 255, 39, 132, 255, 168, 199, 255, 223, 235, 255, 97, 158, 255, 145, 185, 255, 135, 179, 255, 148, 187, 251, 29, 129, 255, 113, 167, 255, 85, 152, 255, 162, 194, 251, 171, 201, 250, 205, 222, 249, 31, 131, 255, 71, 145, 255, 129, 176, 255, 106, 163, 255, 150, 188, 255, 140, 182, 255, 81, 149, 255, 212, 227, 248, 168, 97, 7, 51, 0, 0, 11, 234, 73, 68, 65, 84, 120, 156, 237, 157, 121, 151, 170, 56, 19, 135, 197, 44, 64, 8, 92, 20, 181, 113, 161, 69, 113, 109, 247, 239, 255, 229, 38, 104, 219, 109, 223, 219, 11, 169, 10, 96, 207, 241, 249, 235, 61, 51, 231, 29, 250, 103, 85, 42, 149, 74, 37, 105, 52, 30, 60, 120, 240, 224, 193, 131, 7, 15, 30, 212, 143, 148, 174, 43, 132, 112, 27, 221, 43, 13, 41, 242, 127, 224, 74, 89, 247, 223, 102, 12, 37, 82, 8, 217, 137, 86, 251, 121, 26, 39, 51, 139, 49, 91, 225, 176, 224, 37, 222, 164, 211, 172, 191, 30, 120, 74, 241, 175, 215, 171, 84, 186, 225, 104, 159, 190, 248, 132, 82, 230, 56, 92, 97, 189, 146, 255, 111, 135, 49, 74, 108, 26, 207, 151, 185, 224, 95, 171, 87, 201, 108, 172, 151, 105, 144, 107, 124, 211, 247, 57, 74, 50, 97, 73, 175, 31, 186, 226, 247, 169, 149, 174, 23, 62, 167, 22, 249, 81, 229, 173, 94, 74, 146, 222, 176, 241, 171, 140, 171, 236, 121, 202, 18, 159, 22, 151, 249, 38, 87, 249, 115, 186, 26, 120, 110, 221, 18, 138, 225, 138, 78, 150, 16, 166, 45, 243, 138, 67, 233, 162, 223, 189, 127, 79, 150, 66, 246, 143, 8, 157, 87, 181, 78, 239, 116, 223, 166, 149, 94, 120, 96, 212, 193, 233, 60, 195, 29, 59, 94, 53, 238, 214, 180, 82, 156, 82, 180, 65, 111, 212, 82, 107, 50, 184, 75, 177, 242, 79, 116, 180, 77, 24, 244, 70, 44, 99, 219, 251, 19, 43, 189, 104, 99, 88, 232, 69, 44, 153, 14, 68, 221, 226, 110, 145, 162, 115, 36, 230, 133, 158, 97, 244, 208, 189, 159, 0, 37, 6, 243, 178, 132, 90, 185, 101, 173, 213, 157, 120, 177, 116, 51, 202, 74, 19, 122, 22, 75, 146, 181, 119, 7, 98, 197, 58, 161, 165, 10, 189, 136, 157, 215, 238, 197, 174, 236, 217, 198, 166, 151, 239, 96, 124, 84, 175, 97, 189, 104, 86, 174, 239, 190, 195, 237, 116, 80, 159, 97, 165, 220, 86, 99, 210, 11, 140, 15, 235, 154, 119, 68, 39, 46, 127, 148, 222, 194, 237, 109, 61, 11, 60, 175, 95, 226, 12, 243, 5, 52, 14, 171, 119, 98, 233, 86, 20, 143, 62, 226, 176, 202, 157, 88, 14, 54, 213, 58, 239, 21, 78, 50, 175, 82, 165, 110, 39, 168, 220, 121, 175, 144, 93, 149, 3, 86, 12, 105, 13, 206, 123, 133, 197, 131, 202, 180, 122, 43, 82, 163, 82, 53, 96, 103, 85, 5, 39, 47, 243, 235, 20, 154, 107, 117, 58, 149, 104, 245, 166, 164, 102, 165, 249, 106, 231, 84, 129, 214, 63, 119, 160, 52, 175, 198, 172, 75, 159, 116, 238, 193, 166, 57, 156, 172, 75, 182, 235, 189, 40, 61, 219, 181, 84, 173, 222, 228, 94, 148, 230, 227, 181, 204, 216, 36, 150, 117, 199, 222, 91, 184, 19, 150, 54, 191, 138, 145, 93, 183, 188, 15, 56, 179, 178, 114, 9, 119, 93, 111, 230, 240, 47, 78, 92, 142, 84, 25, 154, 171, 220, 155, 130, 165, 229, 228, 254, 73, 109, 25, 254, 215, 144, 172, 132, 233, 213, 75, 241, 85, 164, 75, 67, 192, 43, 148, 105, 236, 51, 127, 137, 61, 52, 30, 134, 69, 134, 156, 102, 56, 163, 126, 176, 232, 45, 251, 209, 211, 88, 241, 20, 245, 151, 189, 163, 229, 83, 228, 168, 224, 204, 116, 24, 118, 215, 168, 105, 134, 83, 18, 79, 135, 237, 230, 63, 132, 163, 45, 102, 219, 89, 225, 36, 102, 205, 42, 187, 1, 226, 207, 97, 36, 126, 14, 255, 149, 121, 101, 188, 159, 97, 170, 84, 180, 103, 116, 184, 34, 6, 42, 103, 164, 55, 254, 90, 231, 133, 40, 245, 225, 98, 141, 14, 87, 177, 2, 15, 84, 135, 30, 90, 63, 9, 61, 155, 54, 5, 87, 229, 56, 55, 151, 73, 200, 1, 180, 190, 194, 237, 244, 147, 1, 250, 57, 79, 224, 189, 31, 39, 253, 99, 74, 170, 56, 2, 189, 203, 225, 195, 162, 66, 115, 38, 62, 240, 23, 181, 251, 134, 92, 216, 133, 186, 47, 221, 20, 242, 221, 27, 195, 58, 176, 223, 148, 59, 102, 92, 88, 14, 128, 51, 61, 153, 235, 9, 85, 180, 103, 48, 173, 108, 110, 36, 65, 244, 118, 176, 232, 75, 122, 218, 74, 155, 205, 22, 48, 251, 36, 145, 1, 179, 74, 96, 242, 64, 245, 109, 122, 214, 10, 155, 192, 249, 139, 129, 201, 85, 196, 160, 111, 59, 27, 144, 82, 53, 235, 192, 86, 138, 116, 137, 142, 76, 192, 152, 196, 185, 102, 68, 122, 103, 5, 90, 255, 115, 167, 139, 182, 42, 204, 161, 236, 8, 170, 180, 217, 156, 131, 98, 3, 155, 34, 93, 88, 44, 65, 243, 58, 157, 194, 149, 54, 155, 51, 152, 11, 99, 151, 56, 160, 85, 7, 159, 97, 148, 54, 35, 80, 32, 100, 115, 148, 89, 69, 6, 114, 38, 162, 149, 36, 253, 75, 10, 154, 113, 108, 148, 89, 187, 160, 236, 1, 28, 125, 175, 140, 65, 161, 144, 97, 86, 115, 46, 108, 164, 98, 98, 210, 133, 29, 200, 172, 180, 13, 55, 171, 4, 5, 8, 30, 99, 149, 54, 199, 176, 209, 122, 0, 155, 213, 237, 131, 28, 137, 62, 163, 165, 54, 65, 121, 11, 231, 224, 185, 213, 131, 37, 74, 62, 56, 123, 120, 231, 25, 54, 199, 61, 3, 83, 38, 185, 6, 25, 213, 89, 224, 149, 54, 219, 32, 15, 230, 47, 192, 5, 142, 152, 195, 130, 131, 1, 255, 109, 54, 19, 144, 67, 65, 23, 56, 93, 88, 1, 132, 252, 88, 52, 43, 194, 20, 52, 161, 59, 176, 52, 194, 133, 141, 23, 206, 77, 40, 109, 142, 96, 191, 51, 29, 64, 164, 2, 87, 111, 6, 166, 154, 156, 49, 108, 127, 147, 174, 0, 129, 73, 118, 96, 21, 37, 7, 182, 36, 255, 155, 22, 172, 26, 225, 108, 0, 129, 201, 133, 165, 191, 106, 30, 55, 34, 181, 9, 220, 78, 32, 128, 68, 248, 15, 44, 6, 90, 108, 105, 70, 42, 108, 37, 7, 169, 70, 64, 253, 87, 125, 171, 86, 169, 0, 15, 118, 151, 192, 93, 26, 150, 213, 42, 213, 34, 218, 37, 97, 177, 0, 86, 244, 107, 30, 171, 22, 213, 174, 244, 3, 243, 135, 124, 3, 197, 136, 210, 54, 248, 251, 186, 89, 132, 28, 66, 63, 133, 44, 182, 92, 137, 160, 123, 127, 60, 208, 180, 170, 128, 37, 102, 57, 204, 192, 194, 6, 186, 180, 201, 177, 59, 122, 131, 21, 152, 42, 157, 63, 85, 99, 14, 156, 163, 59, 221, 12, 224, 237, 44, 116, 100, 66, 42, 172, 146, 150, 227, 236, 180, 6, 171, 28, 194, 251, 89, 204, 76, 172, 192, 4, 198, 202, 131, 133, 150, 85, 161, 89, 97, 14, 155, 154, 144, 138, 104, 29, 210, 203, 13, 5, 220, 127, 148, 3, 25, 80, 218, 66, 52, 110, 210, 145, 142, 84, 15, 209, 187, 195, 177, 85, 224, 28, 88, 37, 248, 2, 155, 104, 120, 176, 12, 17, 71, 163, 140, 76, 172, 79, 8, 169, 78, 170, 17, 151, 128, 5, 180, 87, 168, 1, 169, 136, 176, 168, 126, 107, 141, 134, 23, 119, 133, 57, 240, 102, 27, 144, 218, 199, 252, 1, 84, 163, 28, 140, 200, 149, 114, 169, 181, 213, 129, 95, 33, 26, 249, 18, 38, 0, 171, 47, 21, 238, 202, 42, 73, 170, 78, 8, 70, 164, 133, 134, 164, 238, 49, 110, 197, 52, 82, 67, 201, 49, 82, 235, 219, 200, 184, 74, 213, 232, 21, 232, 98, 154, 127, 141, 76, 54, 224, 53, 92, 142, 70, 22, 12, 174, 43, 157, 97, 123, 3, 82, 193, 69, 136, 179, 212, 99, 113, 169, 168, 105, 181, 206, 141, 140, 11, 188, 120, 227, 55, 188, 4, 145, 127, 199, 50, 161, 20, 186, 145, 241, 250, 39, 20, 142, 192, 168, 12, 130, 39, 70, 164, 98, 50, 67, 139, 20, 151, 10, 45, 140, 158, 165, 154, 217, 179, 9, 49, 103, 210, 252, 194, 233, 18, 102, 181, 122, 23, 82, 237, 194, 181, 96, 156, 212, 123, 112, 224, 194, 153, 161, 123, 192, 72, 13, 140, 72, 197, 68, 70, 13, 169, 184, 108, 159, 26, 41, 142, 194, 58, 166, 42, 150, 74, 158, 76, 72, 237, 161, 254, 132, 170, 172, 186, 50, 33, 21, 183, 224, 168, 102, 172, 26, 218, 54, 71, 157, 127, 214, 144, 138, 137, 192, 22, 127, 49, 160, 20, 21, 128, 43, 147, 106, 100, 17, 135, 138, 74, 58, 243, 42, 38, 91, 50, 179, 147, 1, 221, 221, 189, 224, 23, 20, 154, 183, 81, 162, 126, 83, 19, 131, 21, 119, 111, 21, 45, 156, 3, 163, 86, 54, 70, 154, 180, 70, 168, 161, 202, 131, 226, 82, 81, 235, 85, 124, 63, 59, 102, 31, 238, 44, 85, 99, 189, 138, 170, 66, 24, 232, 17, 0, 119, 7, 188, 126, 191, 120, 21, 162, 209, 64, 222, 95, 66, 190, 57, 110, 93, 4, 84, 189, 80, 111, 135, 85, 90, 184, 99, 253, 12, 114, 242, 239, 6, 228, 173, 2, 58, 141, 237, 184, 58, 176, 194, 71, 153, 117, 130, 188, 129, 66, 167, 217, 27, 87, 221, 183, 144, 157, 222, 33, 246, 162, 35, 58, 44, 94, 221, 199, 37, 193, 57, 4, 209, 234, 189, 193, 94, 160, 162, 179, 103, 131, 219, 137, 187, 124, 14, 92, 34, 61, 160, 191, 173, 179, 19, 135, 157, 88, 45, 76, 7, 63, 54, 78, 232, 29, 86, 144, 3, 244, 47, 203, 182, 80, 169, 232, 79, 235, 117, 243, 120, 208, 190, 205, 55, 192, 133, 67, 76, 23, 196, 5, 150, 233, 116, 243, 8, 216, 161, 180, 91, 8, 80, 42, 62, 76, 232, 4, 96, 244, 138, 245, 44, 21, 120, 6, 16, 255, 35, 235, 157, 217, 53, 16, 151, 160, 157, 90, 168, 173, 221, 28, 254, 162, 217, 99, 136, 254, 109, 129, 165, 111, 92, 165, 37, 71, 183, 33, 24, 157, 26, 170, 228, 16, 52, 179, 110, 209, 35, 71, 247, 168, 13, 62, 95, 178, 216, 4, 34, 21, 179, 133, 124, 65, 183, 31, 88, 162, 118, 232, 207, 128, 26, 5, 76, 124, 86, 251, 244, 9, 254, 126, 59, 72, 49, 2, 187, 206, 128, 156, 0, 68, 47, 110, 64, 203, 27, 212, 86, 227, 5, 189, 190, 209, 28, 224, 57, 199, 15, 232, 183, 182, 227, 131, 146, 69, 180, 15, 97, 75, 244, 170, 17, 208, 25, 220, 50, 240, 205, 133, 254, 249, 63, 224, 65, 243, 15, 232, 22, 35, 246, 120, 79, 130, 156, 234, 4, 222, 9, 241, 1, 221, 249, 6, 189, 200, 200, 207, 234, 234, 159, 116, 68, 181, 63, 191, 162, 57, 223, 68, 248, 160, 4, 241, 95, 196, 61, 119, 55, 216, 39, 29, 169, 168, 237, 227, 11, 250, 39, 226, 114, 12, 84, 93, 52, 143, 61, 226, 253, 151, 51, 224, 37, 24, 248, 59, 109, 181, 234, 252, 109, 3, 241, 23, 120, 99, 141, 192, 59, 148, 214, 242, 6, 191, 168, 177, 200, 9, 118, 47, 132, 60, 161, 195, 4, 103, 26, 82, 13, 228, 191, 49, 244, 58, 195, 63, 27, 244, 50, 185, 90, 169, 176, 160, 116, 54, 43, 110, 155, 51, 151, 234, 84, 41, 149, 7, 64, 161, 10, 247, 5, 105, 86, 173, 137, 245, 9, 59, 94, 24, 226, 14, 115, 228, 124, 195, 153, 175, 211, 43, 208, 162, 4, 21, 243, 193, 51, 205, 25, 9, 46, 10, 112, 135, 210, 120, 175, 217, 152, 54, 154, 7, 54, 124, 195, 17, 119, 147, 33, 244, 202, 26, 70, 156, 93, 31, 116, 6, 101, 156, 109, 8, 224, 149, 240, 28, 253, 107, 18, 62, 106, 213, 54, 171, 50, 167, 31, 79, 48, 125, 134, 45, 152, 113, 177, 215, 83, 106, 142, 86, 101, 78, 158, 174, 12, 28, 41, 122, 218, 199, 154, 198, 197, 95, 135, 44, 139, 159, 132, 118, 40, 153, 29, 208, 247, 250, 189, 209, 238, 239, 28, 141, 43, 249, 41, 250, 9, 9, 119, 88, 104, 10, 80, 230, 36, 139, 239, 46, 215, 135, 17, 29, 18, 191, 152, 113, 49, 115, 234, 149, 2, 107, 57, 206, 236, 89, 15, 221, 171, 244, 5, 225, 243, 130, 21, 48, 46, 49, 112, 115, 185, 236, 124, 219, 217, 163, 162, 16, 137, 51, 35, 167, 136, 190, 164, 53, 236, 5, 63, 168, 133, 103, 191, 183, 120, 95, 47, 112, 148, 219, 210, 20, 54, 169, 232, 50, 222, 199, 223, 185, 50, 116, 73, 243, 55, 159, 79, 56, 202, 109, 95, 182, 230, 162, 208, 207, 180, 251, 233, 87, 113, 138, 109, 205, 188, 147, 225, 126, 242, 228, 84, 5, 110, 251, 41, 209, 167, 174, 108, 34, 38, 93, 16, 31, 31, 3, 225, 142, 114, 91, 19, 147, 39, 140, 211, 217, 149, 63, 72, 245, 35, 83, 15, 130, 200, 155, 107, 130, 213, 240, 12, 230, 101, 69, 219, 162, 132, 207, 71, 122, 163, 214, 208, 3, 3, 103, 220, 215, 133, 107, 174, 115, 107, 228, 108, 9, 154, 86, 63, 189, 46, 132, 248, 12, 127, 57, 251, 59, 94, 126, 107, 186, 154, 61, 15, 247, 161, 243, 149, 145, 82, 171, 196, 218, 102, 95, 60, 84, 249, 161, 51, 173, 33, 12, 253, 196, 112, 195, 241, 25, 225, 95, 82, 59, 132, 153, 185, 118, 210, 44, 173, 128, 109, 76, 63, 159, 38, 250, 182, 109, 232, 134, 66, 147, 196, 44, 48, 255, 216, 161, 215, 163, 126, 149, 9, 67, 33, 230, 180, 148, 103, 88, 221, 13, 99, 198, 151, 46, 56, 246, 196, 94, 149, 241, 184, 174, 236, 206, 156, 192, 200, 129, 77, 83, 140, 124, 218, 51, 246, 234, 212, 71, 173, 99, 135, 153, 57, 93, 109, 134, 39, 155, 45, 202, 122, 48, 217, 141, 8, 59, 214, 45, 240, 141, 49, 101, 113, 73, 66, 27, 249, 91, 179, 62, 53, 115, 207, 38, 158, 144, 57, 179, 110, 137, 175, 214, 139, 21, 161, 38, 110, 121, 195, 19, 90, 78, 128, 120, 39, 162, 0, 222, 210, 6, 60, 20, 102, 158, 48, 96, 124, 92, 170, 82, 165, 53, 187, 7, 31, 14, 45, 230, 132, 165, 191, 87, 239, 101, 54, 53, 241, 94, 2, 134, 49, 83, 54, 45, 93, 169, 210, 250, 108, 83, 19, 87, 21, 194, 137, 24, 155, 85, 161, 52, 79, 135, 125, 150, 212, 152, 75, 168, 207, 207, 202, 123, 209, 252, 47, 173, 67, 202, 28, 173, 54, 29, 147, 236, 125, 22, 151, 57, 203, 252, 165, 245, 100, 49, 210, 175, 71, 233, 142, 144, 84, 86, 166, 84, 229, 77, 131, 132, 249, 211, 26, 132, 182, 19, 106, 99, 31, 132, 211, 68, 202, 29, 209, 126, 115, 20, 207, 144, 49, 218, 47, 231, 213, 246, 111, 16, 153, 205, 120, 197, 11, 216, 169, 205, 130, 83, 181, 54, 189, 104, 141, 120, 181, 78, 28, 198, 148, 44, 170, 11, 72, 183, 184, 131, 5, 161, 73, 101, 181, 181, 103, 194, 200, 210, 171, 69, 169, 26, 176, 98, 169, 62, 111, 228, 218, 194, 31, 9, 143, 234, 103, 173, 195, 121, 175, 136, 78, 172, 254, 130, 10, 138, 195, 25, 81, 131, 165, 202, 57, 230, 95, 164, 200, 40, 243, 231, 37, 135, 226, 232, 133, 170, 31, 180, 70, 147, 94, 16, 202, 181, 152, 83, 102, 221, 52, 76, 109, 70, 38, 245, 154, 244, 130, 244, 70, 22, 37, 51, 35, 15, 11, 124, 198, 148, 48, 123, 17, 214, 110, 210, 11, 174, 156, 48, 70, 146, 82, 246, 231, 246, 132, 170, 255, 114, 93, 129, 247, 19, 68, 123, 174, 98, 113, 108, 90, 108, 107, 194, 41, 13, 86, 110, 37, 11, 182, 162, 72, 175, 179, 243, 149, 101, 141, 92, 1, 247, 74, 184, 165, 148, 242, 101, 227, 174, 132, 230, 40, 177, 115, 229, 108, 236, 96, 104, 7, 32, 74, 125, 21, 1, 150, 242, 238, 132, 230, 72, 17, 110, 29, 170, 146, 55, 124, 132, 106, 103, 179, 124, 140, 174, 238, 83, 104, 142, 20, 221, 101, 98, 83, 194, 123, 152, 117, 64, 171, 127, 180, 41, 181, 211, 72, 220, 173, 208, 51, 174, 183, 158, 51, 2, 87, 219, 94, 45, 108, 245, 127, 127, 201, 6, 226, 126, 162, 238, 87, 40, 211, 246, 23, 42, 160, 16, 39, 125, 214, 92, 11, 68, 147, 152, 40, 157, 65, 111, 237, 186, 247, 47, 244, 140, 235, 13, 86, 105, 254, 71, 251, 193, 110, 89, 44, 67, 110, 15, 39, 27, 74, 148, 223, 6, 219, 72, 254, 2, 131, 190, 35, 93, 209, 24, 110, 19, 146, 227, 39, 187, 108, 56, 254, 50, 77, 110, 63, 245, 15, 11, 199, 206, 127, 25, 118, 204, 78, 222, 175, 210, 249, 138, 20, 110, 56, 218, 198, 206, 89, 175, 205, 130, 56, 237, 77, 150, 253, 225, 240, 41, 202, 25, 142, 86, 217, 97, 190, 72, 172, 243, 191, 38, 52, 88, 100, 81, 87, 252, 22, 191, 253, 23, 41, 133, 215, 61, 173, 182, 139, 192, 39, 95, 97, 147, 100, 183, 31, 141, 221, 95, 44, 243, 13, 229, 204, 194, 107, 116, 134, 171, 125, 47, 61, 198, 201, 203, 44, 39, 72, 146, 120, 49, 159, 46, 251, 235, 80, 8, 165, 242, 247, 203, 124, 71, 74, 87, 73, 22, 222, 213, 118, 174, 235, 229, 26, 255, 95, 34, 31, 60, 120, 240, 224, 193, 131, 7, 15, 126, 49, 255, 1, 243, 54, 53, 134, 140, 99, 137, 54, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130 },
                            LastName = "Burko",
                            PasswordHash = "4jV+ggNAsN4YJWmfWFpeQlTycbg=",
                            PasswordSalt = "uAIFjatTCiMQxuMwV/R9rg==",
                            Phone = "062440876",
                            Username = "Eldo"
                        });
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.UserRole", b =>
                {
                    b.Property<int>("UserRoleID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleID");

                    b.Property<int>("UserID");

                    b.HasKey("UserRoleID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Appointment", b =>
                {
                    b.HasOne("eDentalClinicWebAPI.Database.Dentist", "Dentist")
                        .WithMany("Appointments")
                        .HasForeignKey("DentistID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eDentalClinicWebAPI.Database.Treatment", "Treatment")
                        .WithMany("Appointments")
                        .HasForeignKey("TreatmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eDentalClinicWebAPI.Database.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.BranchTreatment", b =>
                {
                    b.HasOne("eDentalClinicWebAPI.Database.Branch", "Branch")
                        .WithMany("BranchTreatments")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eDentalClinicWebAPI.Database.Treatment", "Treatment")
                        .WithMany("BranchTreatments")
                        .HasForeignKey("TreatmentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Comment", b =>
                {
                    b.HasOne("eDentalClinicWebAPI.Database.Dentist", "Dentist")
                        .WithMany("Comments")
                        .HasForeignKey("DentistID");

                    b.HasOne("eDentalClinicWebAPI.Database.Topic", "Topic")
                        .WithMany("Comments")
                        .HasForeignKey("TopicID");

                    b.HasOne("eDentalClinicWebAPI.Database.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Dentist", b =>
                {
                    b.HasOne("eDentalClinicWebAPI.Database.Branch", "Branch")
                        .WithMany("Dentists")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eDentalClinicWebAPI.Database.DentalClinic", "DentalClinic")
                        .WithMany("Dentists")
                        .HasForeignKey("DentalClinicID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Notification", b =>
                {
                    b.HasOne("eDentalClinicWebAPI.Database.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Payment", b =>
                {
                    b.HasOne("eDentalClinicWebAPI.Database.Treatment", "Treatment")
                        .WithMany("Payments")
                        .HasForeignKey("TreatmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eDentalClinicWebAPI.Database.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Rating", b =>
                {
                    b.HasOne("eDentalClinicWebAPI.Database.Dentist", "Dentist")
                        .WithMany("Ratings")
                        .HasForeignKey("DentistID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eDentalClinicWebAPI.Database.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Topic", b =>
                {
                    b.HasOne("eDentalClinicWebAPI.Database.User", "User")
                        .WithMany("Topics")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.User", b =>
                {
                    b.HasOne("eDentalClinicWebAPI.Database.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eDentalClinicWebAPI.Database.DentalClinic", "DentalClinic")
                        .WithMany("Users")
                        .HasForeignKey("DentalClinicID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eDentalClinicWebAPI.Database.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.UserRole", b =>
                {
                    b.HasOne("eDentalClinicWebAPI.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eDentalClinicWebAPI.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
