// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eDentalClinicWebAPI.Database;

namespace eDentalClinicWebAPI.Migrations
{
    [DbContext(typeof(eDentalClinicContext))]
    [Migration("20210316094811_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Appointment", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DentistID");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool?>("RatingStatus");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("TreatmentID");

                    b.Property<int>("UserID");

                    b.HasKey("AppointmentID");

                    b.HasIndex("DentistID");

                    b.HasIndex("TreatmentID");

                    b.HasIndex("UserID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Branch", b =>
                {
                    b.Property<int>("BranchID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Title");

                    b.HasKey("BranchID");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.BranchTreatment", b =>
                {
                    b.Property<int>("BranchTreatmentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<int>("TreatmentID");

                    b.HasKey("BranchTreatmentID");

                    b.HasIndex("BranchID");

                    b.HasIndex("TreatmentID");

                    b.ToTable("BranchTreatments");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("CityID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("DentistID");

                    b.Property<string>("Text");

                    b.Property<int>("TopicID");

                    b.Property<int>("UserID");

                    b.HasKey("CommentID");

                    b.HasIndex("DentistID");

                    b.HasIndex("TopicID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.DentalClinic", b =>
                {
                    b.Property<int>("DentalClinicID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.HasKey("DentalClinicID");

                    b.ToTable("DentalClinic");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Dentist", b =>
                {
                    b.Property<int>("DentistID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int>("BranchID");

                    b.Property<int>("DentalClinicID");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<byte[]>("Image");

                    b.Property<string>("LastName");

                    b.Property<string>("Phone");

                    b.HasKey("DentistID");

                    b.HasIndex("BranchID");

                    b.HasIndex("DentalClinicID");

                    b.ToTable("Dentists");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Gender", b =>
                {
                    b.Property<int>("GenderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type");

                    b.HasKey("GenderID");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("NotificationDate");

                    b.Property<string>("Text");

                    b.Property<string>("Title");

                    b.Property<int>("UserID");

                    b.HasKey("NotificationID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("TreatmentID");

                    b.Property<int>("UserID");

                    b.HasKey("PaymentID");

                    b.HasIndex("TreatmentID");

                    b.HasIndex("UserID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Rating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("DentistID");

                    b.Property<int>("DentistRating");

                    b.Property<DateTime>("RatingDate")
                        .HasColumnType("date");

                    b.Property<int>("UserID");

                    b.HasKey("RatingID");

                    b.HasIndex("DentistID");

                    b.HasIndex("UserID");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Topic", b =>
                {
                    b.Property<int>("TopicID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description");

                    b.Property<string>("Subject");

                    b.Property<string>("Text");

                    b.Property<int>("UserID");

                    b.HasKey("TopicID");

                    b.HasIndex("UserID");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Treatment", b =>
                {
                    b.Property<int>("TreatmentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Image");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.Property<int>("TimeRequired");

                    b.HasKey("TreatmentID");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int>("CityID");

                    b.Property<int>("DentalClinicID");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<int>("GenderID");

                    b.Property<byte[]>("Image");

                    b.Property<string>("LastName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordSalt");

                    b.Property<string>("Phone");

                    b.Property<string>("Username");

                    b.HasKey("UserID");

                    b.HasIndex("CityID");

                    b.HasIndex("DentalClinicID");

                    b.HasIndex("GenderID");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.UserRole", b =>
                {
                    b.Property<int>("UserRoleID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleID");

                    b.Property<int>("UserID");

                    b.HasKey("UserRoleID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Appointment", b =>
                {
                    b.HasOne("eDentalClinicWebAPI.Database.Dentist", "Dentist")
                        .WithMany("Appointments")
                        .HasForeignKey("DentistID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eDentalClinicWebAPI.Database.Treatment", "Treatment")
                        .WithMany("Appointments")
                        .HasForeignKey("TreatmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eDentalClinicWebAPI.Database.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.BranchTreatment", b =>
                {
                    b.HasOne("eDentalClinicWebAPI.Database.Branch", "Branch")
                        .WithMany("BranchTreatments")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eDentalClinicWebAPI.Database.Treatment", "Treatment")
                        .WithMany("BranchTreatments")
                        .HasForeignKey("TreatmentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Comment", b =>
                {
                    b.HasOne("eDentalClinicWebAPI.Database.Dentist")
                        .WithMany("Comments")
                        .HasForeignKey("DentistID");

                    b.HasOne("eDentalClinicWebAPI.Database.Topic", "Topic")
                        .WithMany("Comments")
                        .HasForeignKey("TopicID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eDentalClinicWebAPI.Database.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Dentist", b =>
                {
                    b.HasOne("eDentalClinicWebAPI.Database.Branch", "Branch")
                        .WithMany("Dentists")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eDentalClinicWebAPI.Database.DentalClinic", "DentalClinic")
                        .WithMany("Dentists")
                        .HasForeignKey("DentalClinicID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Notification", b =>
                {
                    b.HasOne("eDentalClinicWebAPI.Database.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Payment", b =>
                {
                    b.HasOne("eDentalClinicWebAPI.Database.Treatment", "Treatment")
                        .WithMany("Payments")
                        .HasForeignKey("TreatmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eDentalClinicWebAPI.Database.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Rating", b =>
                {
                    b.HasOne("eDentalClinicWebAPI.Database.Dentist", "Dentist")
                        .WithMany("Ratings")
                        .HasForeignKey("DentistID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eDentalClinicWebAPI.Database.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.Topic", b =>
                {
                    b.HasOne("eDentalClinicWebAPI.Database.User", "User")
                        .WithMany("Topics")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.User", b =>
                {
                    b.HasOne("eDentalClinicWebAPI.Database.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eDentalClinicWebAPI.Database.DentalClinic", "DentalClinic")
                        .WithMany("Users")
                        .HasForeignKey("DentalClinicID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eDentalClinicWebAPI.Database.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eDentalClinicWebAPI.Database.UserRole", b =>
                {
                    b.HasOne("eDentalClinicWebAPI.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eDentalClinicWebAPI.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
